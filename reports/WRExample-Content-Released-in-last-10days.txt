<!--
////////////////////////////////////////////////////////////////////////////////
///////////////////////////[COMMENTS START]/////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Requires Access to ref CDN's
// Customer should not use IE with this report framework, 
// Webkit browsers prefered (Chrome,Fireforx,Safari)
// This code is not supported, use at your own risk and discretion
////////////////////////////////////////////////////////////////////////////////
///////////////////////////[COMMENTS END]///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
-->


<head>
<!--

https://cdn.datatables.net/1.12.0/css/jquery.dataTables.min.css
https://cdn.datatables.net/1.12.0/js/jquery.dataTables.min.js

<!-- Generated by Datatables build Start-->

<script
  src="https://code.jquery.com/jquery-2.2.4.min.js"
  integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
  crossorigin="anonymous">
</script>

<link rel="stylesheet" href="https://cdn.datatables.net/1.12.0/css/jquery.dataTables.min.css"/>
<script src="https://cdn.datatables.net/1.12.0/js/jquery.dataTables.min.js"></script>

<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.2.3/css/buttons.dataTables.min.css"/>
<script src="https://cdn.datatables.net/buttons/2.2.3/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.3/js/buttons.colVis.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.3/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.3/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.2.3/js/buttons.print.min.js"></script>

<link rel="stylesheet" href="https://cdn.datatables.net/colreorder/1.5.6/css/colReorder.dataTables.min.css"/>
<link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.2.3/css/fixedHeader.dataTables.min.css"/>
<script src="https://cdn.datatables.net/fixedheader/3.2.3/js/dataTables.fixedHeader.min.js"></script>

<link rel="stylesheet" href="https://cdn.datatables.net/select/1.4.0/css/select.dataTables.min.css"/>
<script src="https://cdn.datatables.net/select/1.4.0/js/dataTables.select.min.js"></script>

<link rel="stylesheet" href="https://cdn.datatables.net/scroller/2.0.6/css/scroller.dataTables.min.css"/>
<script src="https://cdn.datatables.net/scroller/2.0.6/js/dataTables.scroller.min.js"></script>


<link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/4.1.0/css/fixedColumns.dataTables.min.css/>
<script src="https://cdn.datatables.net/fixedcolumns/4.1.0/js/dataTables.fixedColumns.min.js"></script>

<link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.2.3/css/fixedHeader.dataTables.min.css/>
<script src="https://cdn.datatables.net/fixedheader/3.2.3/js/dataTables.fixedHeader.min.js"></script>
<!-- Generated by Datatables build End-->



<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!-- Optional theme -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

<!-- Latest compiled and minified JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

<style>
table.dataTable td {
  font-size: 0.875em;
}
</style>

<script type="text/javascript" charset="utf-8">
/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////[Start of Detect Browser]/////////////////////////
/////////////////////////////////////////////////////////////////////////////////
 // This code must prefix all code within the report...
 //	//These functions are here to detect if Jquery 2.0 will be supported, 
//https://jquery.com/browser-support/
var global_browser_detection = ''	


function js_detect_browser_unsupported(){
	//These functions are here to detect if Jquery 2.0 will be supported, 
	//https://jquery.com/browser-support/
	
var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    // Opera 8.0+ (UA detection to detect Blink/v8-powered Opera)
var isFirefox = typeof InstallTrigger !== 'undefined';   // Firefox 1.0+
var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
    // At least Safari 3+: "[object HTMLElementConstructor]"
var isChrome = !!window.chrome && !isOpera;              // Chrome 1+
var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6

	if (isOpera) {
			global_browser_detection = 'Opera'
	}
	if (isFirefox) {
		global_browser_detection = 'Firefox'
	}
	if (isSafari) {
		global_browser_detection = 'Safari'
	}
	if (isChrome) {
			global_browser_detection = 'Chrome'
	}
	if (isIE) {
		
		var ie_ver = js_detect_browser_msieversion()
		global_browser_detection = 'IE ' &  ie_ver
		if (js_detect_browser_isint(ie_ver)){
			if (ie_ver  < 10){
				alert('This version of IE is not supported... The minimum IE version supported by this report framework is IE 10, \n \n Note: You may be using IE 10 or 11, however the native compatibility is set to 8 (IE 10 & 11 sets the default compatibility to 8). If you are using IE 11 or 10, check your document mode (press F12 / Emulation Tab / Document Mode) \n \n Javascript has detected IE version as: ' + ie_ver )
				document.execCommand("Stop"); 
			}
			
		}

	}
}

function js_detect_browser_msieversion(){

        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
		var retstring

        if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))      // If Internet Explorer, return version number
            retstring = (parseInt(ua.substring(msie + 5, ua.indexOf(".", msie))));
        else                 // If another browser, return 0
            retstring = 'otherbrowser';

  return retstring;
}

function js_detect_browser_isint(n){
   return n % 1 === 0;
}

js_detect_browser_unsupported()
/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////[END of Detect Browser]///////////////////////////
/////////////////////////////////////////////////////////////////////////////////
</script>	




</head>


	
<script type="text/javascript" charset="utf-8">
//Global Object Arrays
var arr01 = new Array()
var global_data_tbl_object
var global_data_tbl_object
var global_query_cnter = 0
var global_stop_report_flag = false

function js_onload(){

		//Fix for IE Trim
		// Adding trim function to String object
		if(typeof String.prototype.trim !== 'function') {
		  String.prototype.trim = function() {
			return this.replace(/^\s+|\s+$/g, '');
		  }
		}

		//Prototype for contains in array
		Array.prototype.contains = function(obj) {
			var i = this.length;
			while (i--) {
				if (this[i] == obj) {
					return true;
				}
			}
			return false;
		}

		//Prototype for unique in array
		//This version has been tweaked to drop null spaces
		Array.prototype.unique = function() {
			var arr = [];
			for(var i = 0; i < this.length; i++) {
				if (this[i].trim() != ''){
					if(!arr.contains(this[i].toLowerCase())) {
						arr.push((this[i].toLowerCase()).trim());
					}
				}
			}
			return arr; 
		}	
		
		runreport()
}
	

function runreport(){

		//Reset Async Query Queue
		js_async_queue_reset()
		
		//Scafold table
		var headerrow = ''
		headerrow += "<th>Fixlet Name</th>"
		headerrow += "<th>Fixlet Link</th>"
		headerrow += "<th>Fixlet Site</th>"
		headerrow += "<th>Source Release Date</th>"
		headerrow += "<th>BigFix Release Date</th>"
		headerrow += "<th>BigFix Last Mod Date</th>"
		headerrow += "<th>Applicable Computers</th>"
		headerrow += "<th>Open Action Count</th>"

		
		
		var htmltoappend = ''
		htmltoappend += '<table  class="display dataTable hover row-border compact" cellpadding="0" cellspacing="0" id="returned_tbl" width="100%">'
		htmltoappend += '<thead>'
		htmltoappend += headerrow								
		htmltoappend += '</thead>'
		htmltoappend += '<tbody id="tbl_body">'

		htmltoappend += '</tbody>'
		htmltoappend += '<tfoot>'
		htmltoappend += '<tr>'
		htmltoappend += headerrow								
		htmltoappend += '</tr>'
		htmltoappend += '</tfoot>'
		htmltoappend += '</table>'
		$('#div_result').html(htmltoappend)
		
		//Setup Progress Bar 
		var resetpercent = 0
		$('#progress_bar').css('width', resetpercent.toFixed(2) +'%').attr('aria-valuenow', resetpercent.toFixed(2));
		$('#progress_bar').css('width', resetpercent.toFixed(2) +'%').attr('aria-valuenow', resetpercent.toFixed(2));
		$('#progress_bar').html(resetpercent.toFixed(2) + '%')
	
		//Turn on modal
		$('#modal_report_running').modal('show')
		
		//Initial Query Returns CVE \ and number of references
		var query = ''
		query = 'concatenations of trs of (td of name of it & td of link "Open Fixlet Link"of it & td of display name of site of it & td of (if exists source release date of it then source release date of it as string else "n/a") & td of (if exists mime field "x-fixlet-first-propagation" of it then date (local time zone) of (mime field "x-fixlet-first-propagation" of it as time) as string else "n/a" of it) & td of (if exists mime field "x-fixlet-modification-time" of it then mime field "x-fixlet-modification-time" of it as local time as string else "n/a") & td of (applicable computer count of it as string) & td of (open action count of it as string) ) of bes fixlets whose ( not custom flag of it AND ( date (local time zone) of (mime field "x-fixlet-first-propagation" of it as time) > (current date - 10 * day)) OR (date (local time zone) of (mime field "x-fixlet-modification-time" of it as time) > (current date - 10 * day)) )'
		
		
		var callback = function(result){
							$('#tbl_body').append(result)
							js_debug('and we are done!')
							$('#modal_report_running').modal('hide') 
							js_setupdt()
					 }
									
									
									
							
							
						js_debug('Assemble Array Complete')	
						
			js_async_queue(query,callback)
		
}

function js_setupdt(){
	//Setup Datatable
	global_data_tbl_object = $('#returned_tbl').dataTable( {

	"order": [[ 00, "asc" ]],
	  "columnDefs": [{ "width": "8%", "targets":[0] }],
	 "iDisplayLength": 10,
	"sDom": 'Blfrtip',		
		 "bPaginate": true,
		 "pageLength": 50,
		 "bAutoWidth": true,
		 "bFilter": true,
		 "bSort": true, 
		 "buttons":['copy', 'csv', 'excel', 'pdf', 'print']
	} );
	
	//Turn off modal
	$('#div_result').show()
	setTimeout(function(){$('#modal_report_running').modal('hide')},100)
}
/////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////[Async_Relevance START ]//////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
	//Global Vars
	var global_total_open_query_counter = 0							//Counter keeps tracks of calls in and out will be 0 if all returned
	var global_total_query_error_counter = 0						//Counter keeps track of total errors
	var global_query_queue_call_threshold = 5						//Global limiter to number of calls open...	
	var global_query_queue_instance_tracker 						//global_query_queue_instance_tracker keeps track of how many times the queue caller has called back to itself...
	var global_query_queue_call_multiplier = 20						//delay setting for calls
	var global_query_queue_call_delay_max_ms = 1500					//Maximum number of milliseconds to delay calls
	var global_query_queue_initialized = false						//Global for initializing Queue
	var global_query_queue_start_time = new Date()					//This sets the initial start time that the queue was created so we can calulate things like queries per sec
	var global_query_queue_total_batch_progress_counter = 0			//This is a running counter of calls that have called back to the call_back (ie. Completed Calls ran through queue)
	var global_total_batch_total_counter = 0						
	var global_total_batch_success_counter = 0 
	var global_query_queue_debug = false
	var global_query_aync_cnter = 0
	var global_query_aync_halt_all_calls = false					//Toggle this to True, and all calls will halt

function js_async_queue_reset(){
	global_query_queue_initialized = false
	var global_query_aync_halt_all_calls = true
}
	
function js_async_queue(query,callback,tmpobj){
	if (global_query_queue_debug == true) {js_debug('caller=' + arguments.callee.caller.name)}
	//if the query queue has not been initialized... then lets set the instance tracker to sub one of the threshold initially 
	//and then set the global_query_queue_initialized variable to know we have the queue initialized, we also start the timer...
	//the critical piece is this code, should only run the first time the queue is initialized, NOT per query... but only the first time. 
	if (global_query_queue_initialized == false) {
		if (global_query_queue_debug == true) {js_debug('A Async Query Queue has been initialized')}
		global_query_queue_instance_tracker = global_query_queue_call_threshold -1 //global_query_queue_instance_tracker keeps track of how many times the queue caller has called back to itself...
		global_query_queue_initialized = true //by setting this breadcrumb we will not loop back into this if statement, until the initialization var is reset back to false, which should only occur if the same var was set to false		
		//Setting the defaults
		global_total_batch_total_counter = 0 //This is the total amount of queries throwm to the queue		
		global_total_batch_success_counter = 0 //This is the total amount of successful queries that have completed
		global_query_queue_total_batch_progress_counter = 0 //This is a running counter of calls that have called back to the call_back (ie. Completed Calls ran through queue)
		global_query_queue_start_time = new Date() //This sets the initial start time that the queue was created so we can calulate things like queries per sec
	}

	if (arguments.callee.caller.name == 'js_query_queue_sendbacktoqueue') {
		//the fn called itself
		//This statement should only run when the function been called byitself
		//This allows me to keep track of how many calls should be processed by the queue. 
		//If the function is called by itself it is being pushed back in the queue, if it is called by an external function that means we have a new call into the queue
		if (global_query_queue_debug == true) {js_debug('Caller=backtoque')}	
	} else {
		if (global_query_queue_debug == true) {js_debug('Caller=called externally')}
		global_total_batch_total_counter++
	}
	
	//global_query_queue_instance_tracker keeps track of how many times the queue caller has called back to itself...
	global_query_queue_instance_tracker ++

	 // so if the number of open calls is > the number of calls limited by the queue then lets sleep a bit, and multiply the instance tracker
	 if (global_total_open_query_counter > global_query_queue_call_threshold) { 
	 
		//Check in a few miliseconds * the ms multiplyer... So as more queue calls get behind, we should slow down
		//The name of this function is important, as this is how we know if the function called back to itself
		if (global_query_queue_call_delay_max_ms >  global_query_queue_call_multiplier * global_query_queue_instance_tracker )
			{var msdelay = global_query_queue_call_multiplier * global_query_queue_instance_tracker}
		else {
			var msdelay = global_query_queue_call_delay_max_ms
		}
		setTimeout(function js_query_queue_sendbacktoqueue(){
			js_async_queue(query,callback,tmpobj)
		 }, msdelay )
	  } 
	  
	  else {
		//there is some space in the queue - fire another query
		
		//So here we are defining the callback after when we recieve the call back from the async handler
		/////////////query_queue_wrapped_callback/////////////
		/////////////[         START            ]/////////////
		/////////////query_queue_wrapped_callback/////////////
		var query_queue_wrapped_callback = (function (result,tmpobj){
			if (global_query_queue_debug == true) {js_debug('In query_queue_wrapped_callback')}
			
			global_query_queue_total_batch_progress_counter ++	
			global_total_batch_success_counter ++
			//js_query_queue_ui_update_statistics()

				//Last Step, Call Passed in Callback
				if (global_query_queue_debug == true) {js_debug('Exiting Query Queues doublefire callback, calling passed in fn')}
				callback(result,tmpobj)
		});
		js_async_relevance(query, query_queue_wrapped_callback, tmpobj)
		global_query_queue_instance_tracker = 0 //this resets the queue instance tracker (which keeps track of how many times the queue has called itself)
	  }
}	

function js_async_relevance( query, callback, tmpobj ){
	if (global_query_aync_halt_all_calls == true)
	{
		return
	}

		global_query_aync_cnter++
		global_total_open_query_counter++
		var qtrack = new Object()
		var s0 = new Date()
		var s1 = s0.getTime()
		qtrack.start = s0
		qtrack.query = query
		qtrack.callnumber = global_query_aync_cnter	
		js_debug('Async Query Executing [ID=' + global_query_aync_cnter +'] Query= ' + query)

	 Relevance( query, { 
	   success: function ( result ) { 
			var e0 = new Date()
			var e1 = e0.getTime()
			qtrack.end = e1
			qtrack.mstime = ((e1 - s1).toString())
			js_debug('Returning Async Query: [ID=' + qtrack.callnumber + '] Query=' + query + ' Evaltime:' +  qtrack.mstime)
			global_total_open_query_counter = global_total_open_query_counter -1
			callback( result, tmpobj ); 
	   },  
	   failure: function ( error ) {
			global_total_query_error_counter++
			global_total_open_query_counter = global_total_open_query_counter -1
			alert('Returning Async Query Error: \n Query: ' + query + ' \n\n Error: ' + error);
				var errdesc = '<font color="red">Returning Async Query Error: [ID=' + qtrack.callnumber + '] </font>'
					errdesc += '<BR><font color="red"> Query=' + query + '</font>'
					errdesc += '<BR><font color="red">ERROR:' +  error+ '</font>'
				js_debug(errdesc)
	   } 
	 },qtrack, tmpobj);
}
/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////[Async_Relevance END ]///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////



//****************************************************************************************************
//**************************************[SUPPORTING FUNCTION]*****************************************
//****************************************************************************************************
//****************************************************************************************************
var global_event_cnter = 0
var global_event_total_cnter = 0
var global_event_cnter_limit  = 100

function js_randomint() {
  return Math.floor(Math.random() * (1000000000000 - 0 + 1)) + 0;
}

function js_activetab(tab){
    $('.nav-tabs a[href="#' + tab + '"]').tab('show');
};

function js_debug(varin){
	global_event_cnter++
	global_event_total_cnter++
	var dt = new Date();
	var utcDate = dt.toUTCString();	
	if (global_event_cnter > global_event_cnter_limit){
		global_event_cnter =0
		$('#div_debug').html('')
		$('#div_debug').append('<br><b><font size="2" color="black">+EVENT Log Rolled (' + utcDate + ')</font></b>')
	}
	
	$('#div_debug').append('<br><font size="2" color="blue">+EVENT ['+ global_event_total_cnter +'] - (' + utcDate + ')</font><br>')
	$('#div_debug').append( '<font size="2" color="black">  DESC: ' + varin + '</font>')		
}


function js_replaceall( text, invar, out ){
	//Replaces all text vars from a string (note will not work on an array, needs to be called per element in that case)
	var ret = text.split(invar).join(out);
	return ret;
}


function js_relevance(q){
	global_query_cnter++
	var a = Date.now();
	js_debug('Executing Query [ID=' + global_query_cnter +'] = ' + q)
	var ret = EvaluateRelevance(q)	
	var b = Date.now();
	var mscounter = (b-a)
	js_debug('Query [ID=' + global_query_cnter +'] Complete in: ' + mscounter + 'ms')
	return ret
}

$(document).ready( function () {
		js_onload()
})	
	
		
	</script>
<body id='main_body'>

		<div id='modal_report_running'class="modal fade" tabindex="-1" role="dialog">
		  <div class="modal-dialog">
			<div class="modal-content">
			  <div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title"><span class="glyphicon glyphicon-refresh"></span> Hold on for a bit... <span id='span_percent_msg'></span></h4>
			  </div>
			  <div class="modal-body">
				<p>A Query or Report is running in the background. Your browser may seem to be unresponsive while queries are running. This is normal until all queries have completed. Once all queries have completed, your browser will return responsive control. If you are asked to kill active running javascripts, select NO, and allow the scripts to continue to run. Forcing scripts to end will cause unpredictable behavior.</p>
			  </div>
			  
			  
			  <div class="modal-footer">
				<!--<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>-->
				
					<div class="progress">
						<div id="progress-bar-wrapper" class="progress progress-striped active">
						   <div id="progress_bar" class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
							</div>
						</div>
					</div>
			  </div>
			</div><!-- /.modal-content -->
		  </div><!-- /.modal-dialog -->
		</div><!-- /.modal -->

		<div class='tab1_container'>
			<div class="well">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<i class="fa fa-dashboard fa-fw"></i>
					</div>
					<div class="panel-body">
						<div class="row">
							<div class="col-lg-12">			
								<ul class="nav nav-tabs">
								  <li id='tab1'><a data-toggle="tab" href="#tab1target"><span class="glyphicon glyphicon-file"></span>Report</a></li>
								  <li id='tab4'><a data-toggle="tab" href="#tab4target" class="debugdivs"><span class="glyphicon glyphicon-cog"></span> Debug</a></li>
								</ul>

								<div class="tab-content">
								  <!--1st Tab Contents Start-->
								  <div id="tab1target" class="tab-pane fade in active">

										<form role="form">
											<fieldset id="ui_reportype_qna_wrapper" align="left" class="form-group">
												<div class="well">
													<div class="panel panel-primary">
														<div class="panel-heading">
															<i class="fa fa-dashboard fa-fw"></i>
															<span class="glyphicon glyphicon-cog"></span>
															<label>Recent Released Content Report </label>
														</div>
														<div class="panel-body">
															<div class="row">
																<div class="col-md-12">
																	<div class="panel panel-primary">
																		<div style="height:85px" class="well">
																			<div class="row">
																				<div class="col-md-12">
																					<b>Description:</b>
																					<br> This report has been developed to report on content that has been recently released (within the last 10 days) 
																				</div>	
																			</div>
																			<br>
																			<div class="row">
																				<div class="col-md-12">
																					<div class="input-group">	

																					
																					</div>	
																				</div>	
																			</div>
																		</div>
																		
																	</div>
															
																</div>		
															</div>
														</div>	
													</div>	
												</div>	
											</fieldset>	
										</form>	
										<br>
									<div id="div_result"></div>
								  </div>
								  <!--1st Tab Contents end-->
								  

								  <!--Debug Tab Contents Start-->
								  <div id="tab4target" class="tab-pane fade debugdivs">
									<h4 align="center"><span class="glyphicon glyphicon-cog"></span> Debug Information</h4>
									<br>
										<div class="well">
											<div id='div_debug' style="height:400px;overflow:scroll;padding:5px;border:1px dashed #DEBB07;"></div>
											<br>
										</div>
								   </div>	
								  <!--4th Tab Contents End-->	


									</div><!--Tab Contents Start-->
								 </div><!--Tab Contents End-->
							</div><!--End Colmn-->
						</div><!--End Row-->
					</div><!--End Panel Body-->					
				</div><!--Pannel Body End-->
			</div><!--Welll End-->
		</div>	<!--Tab Container End-->
	</body>